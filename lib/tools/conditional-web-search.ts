/**
 * Sistema de b√∫squeda condicional inteligente
 * Solo busca en internet cuando es necesario informaci√≥n legal colombiana espec√≠fica
 */

import { detectLegalQuery, logLegalDetection, LegalDetectionResult } from './smart-legal-detector'
import { searchWithSerperSimple, formatSimpleSearchResults } from './simple-serper-search'

// Funci√≥n para formatear resultados de b√∫squeda para contexto
function formatSearchResultsForContext(searchResults: any): string {
  if (!searchResults || !searchResults.results || searchResults.results.length === 0) {
    return 'No se encontraron resultados espec√≠ficos en internet para esta consulta.'
  }

  const formattedResults = searchResults.results.map((result: any, index: number) => {
    return `${index + 1}. **${result.title}**
   URL: ${result.url}
   Contenido: ${result.snippet || result.content || 'Sin contenido disponible'}
   
`
  }).join('\n')

  return `**INFORMACI√ìN ENCONTRADA EN INTERNET:**

${formattedResults}

**FUENTES CONSULTADAS:**
${searchResults.results.map((result: any, index: number) => `${index + 1}. [${result.title}](${result.url})`).join('\n')}`
}

export interface ConditionalSearchResult {
  shouldSearch: boolean
  searchResults?: any
  webSearchContext: string
  detectionResult: LegalDetectionResult
}

/**
 * Ejecuta b√∫squeda web solo si es necesario seg√∫n an√°lisis inteligente
 */
export async function executeConditionalWebSearch(
  userQuery: string,
  options: {
    forceSearch?: boolean
    logDetection?: boolean
  } = {}
): Promise<ConditionalSearchResult> {
  
  // 1. Analizar si la consulta requiere b√∫squeda web
  const detectionResult = detectLegalQuery(userQuery)
  
  // 2. Logging opcional
  if (options.logDetection !== false) {
    logLegalDetection(userQuery, detectionResult)
  }
  
  // 3. Forzar b√∫squeda si se especifica (para testing)
  const shouldSearch = options.forceSearch || detectionResult.requiresWebSearch
  
  if (!shouldSearch) {
    return {
      shouldSearch: false,
      webSearchContext: generateNoSearchContext(detectionResult),
      detectionResult
    }
  }
  
  // 4. Ejecutar b√∫squeda web simplificada con Serper
  console.log(`üîç Ejecutando b√∫squeda web simplificada con Serper...`)
  
  try {
    const searchResults = await searchWithSerperSimple(userQuery, 5)
    
    if (searchResults && searchResults.success && searchResults.results && searchResults.results.length > 0) {
      const webSearchContext = formatSimpleSearchResults(searchResults)
      
      console.log(`‚úÖ B√∫squeda exitosa: ${searchResults.results.length} resultados encontrados (${searchResults.searchEngine})`)
      
      return {
        shouldSearch: true,
        searchResults,
        webSearchContext,
        detectionResult
      }
    } else {
      console.log(`‚ö†Ô∏è B√∫squeda sin resultados espec√≠ficos`)
      
      return {
        shouldSearch: true,
        searchResults: null,
        webSearchContext: generateNoResultsContext(detectionResult),
        detectionResult
      }
    }
  } catch (error) {
    console.error(`‚ùå Error en b√∫squeda web:`, error)
    
    return {
      shouldSearch: true,
      searchResults: null,
      webSearchContext: generateErrorContext(error, detectionResult),
      detectionResult
    }
  }
}

/**
 * Genera contexto cuando no se requiere b√∫squeda
 */
function generateNoSearchContext(detectionResult: LegalDetectionResult): string {
  return `üß† AN√ÅLISIS INTELIGENTE COMPLETADO

‚úÖ DECISI√ìN: No se requiere b√∫squeda web
üìã Raz√≥n: ${detectionResult.reason}
üéØ Confianza: ${(detectionResult.confidence * 100).toFixed(1)}%

Esta consulta no requiere informaci√≥n legal espec√≠fica de internet.
Puedes responder bas√°ndote en tu conocimiento general.`
}

/**
 * Genera contexto cuando la b√∫squeda no encuentra resultados
 */
function generateNoResultsContext(detectionResult: LegalDetectionResult): string {
  return `üîç B√öSQUEDA WEB EJECUTADA - SIN RESULTADOS ESPEC√çFICOS

‚úÖ DECISI√ìN: B√∫squeda web ejecutada seg√∫n an√°lisis inteligente
üìã Raz√≥n: ${detectionResult.reason}
üéØ Confianza: ${(detectionResult.confidence * 100).toFixed(1)}%

‚ö†Ô∏è RESULTADO: La b√∫squeda no encontr√≥ informaci√≥n espec√≠fica adicional.

INSTRUCCIONES:
1. **MENCIONA** que se ejecut√≥ una b√∫squeda web inteligente
2. **Responde** bas√°ndote en tu conocimiento legal
3. **NO incluyas** bibliograf√≠a web (no hay URLs v√°lidas)
4. **Explica** que la b√∫squeda no encontr√≥ fuentes espec√≠ficas adicionales`
}

/**
 * Genera contexto cuando hay error en la b√∫squeda
 */
function generateErrorContext(error: any, detectionResult: LegalDetectionResult): string {
  return `‚ùå B√öSQUEDA WEB CON ERROR

‚úÖ DECISI√ìN: B√∫squeda web intentada seg√∫n an√°lisis inteligente
üìã Raz√≥n: ${detectionResult.reason}
üéØ Confianza: ${(detectionResult.confidence * 100).toFixed(1)}%

‚ùå ERROR: ${error instanceof Error ? error.message : 'Error desconocido'}

INSTRUCCIONES:
1. **MENCIONA** que se intent√≥ una b√∫squeda web pero hubo un error t√©cnico
2. **Responde** bas√°ndote en tu conocimiento legal
3. **NO incluyas** bibliograf√≠a web
4. **Explica** que hubo un problema t√©cnico con la b√∫squeda`
}

/**
 * Genera el mensaje de sistema apropiado basado en el resultado de b√∫squeda condicional
 */
export function generateSystemMessage(
  userQuery: string,
  searchResult: ConditionalSearchResult
): string {
  
  if (!searchResult.shouldSearch) {
    return `Eres un asistente legal especializado en derecho colombiano.

üß† B√öSQUEDA WEB INTELIGENTE - NO REQUERIDA

${searchResult.webSearchContext}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

Responde en espa√±ol colombiano con terminolog√≠a jur√≠dica precisa.
No menciones b√∫squeda web ya que no fue necesaria.`
  }
  
  // Si se ejecut√≥ b√∫squeda, generar mensaje apropiado seg√∫n el resultado
  if (searchResult.searchResults && searchResult.searchResults.success) {
    return `Eres un asistente legal especializado en derecho colombiano.

üîç B√öSQUEDA WEB INTELIGENTE EJECUTADA

${searchResult.webSearchContext}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**OBLIGATORIO**: Menciona que se ejecut√≥ una b√∫squeda web inteligente en tu respuesta.

Responde en espa√±ol colombiano con terminolog√≠a jur√≠dica precisa.`
  } else {
    return `Eres un asistente legal especializado en derecho colombiano.

üîç B√öSQUEDA WEB INTELIGENTE EJECUTADA - SIN RESULTADOS

${searchResult.webSearchContext}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**OBLIGATORIO**: Menciona que se ejecut√≥ una b√∫squeda web inteligente en tu respuesta.

Responde en espa√±ol colombiano con terminolog√≠a jur√≠dica precisa.`
  }
}

/**
 * Funci√≥n de utilidad para testing
 */
export function testLegalDetection(queries: string[]): void {
  console.log(`\nüß™ TESTING DETECTOR LEGAL INTELIGENTE`)
  console.log(`${'='.repeat(80)}`)
  
  queries.forEach((query, index) => {
    console.log(`\n${index + 1}. "${query}"`)
    const result = detectLegalQuery(query)
    logLegalDetection(query, result)
  })
  
  console.log(`\n${'='.repeat(80)}`)
  console.log(`‚úÖ Testing completado`)
}
