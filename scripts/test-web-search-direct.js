/**
 * Script para probar directamente la funci√≥n de b√∫squeda web mejorada
 */

import { searchWebEnriched, formatSearchResultsForContext } from '../lib/tools/web-search.js'

async function testWebSearchDirectly() {
  console.log('\n' + '='.repeat(80))
  console.log('üîç PRUEBA DIRECTA DE B√öSQUEDA WEB MEJORADA')
  console.log('='.repeat(80))
  
  const testQuery = 'habeas data'
  console.log(`\nüîç Probando b√∫squeda: "${testQuery}"`)
  
  try {
    // Probar la b√∫squeda web
    const searchResults = await searchWebEnriched(testQuery)
    
    if (searchResults.success) {
      console.log(`‚úÖ B√∫squeda exitosa`)
      console.log(`üìä Resultados encontrados: ${searchResults.results.length}`)
      
      // Mostrar resultados con clasificaci√≥n
      console.log(`\nüìö RESULTADOS CLASIFICADOS:`)
      searchResults.results.forEach((result, index) => {
        const isOfficial = result.score === 3
        const isAcademic = result.score === 2
        const icon = isOfficial ? '‚öñÔ∏è' : isAcademic ? 'üéì' : 'üìÑ'
        const type = isOfficial ? 'OFICIAL' : isAcademic ? 'ACAD√âMICA' : 'OTRA'
        
        console.log(`\n${index + 1}. ${icon} ${result.title} [${type}]`)
        console.log(`   URL: ${result.url}`)
        console.log(`   Score: ${result.score}`)
        console.log(`   Snippet: ${result.snippet.substring(0, 100)}...`)
      })
      
      // Contar por tipo
      const officialCount = searchResults.results.filter(r => r.score === 3).length
      const academicCount = searchResults.results.filter(r => r.score === 2).length
      const otherCount = searchResults.results.filter(r => r.score === 1).length
      
      console.log(`\nüìà RESUMEN DE CALIDAD:`)
      console.log(`   - Fuentes oficiales: ${officialCount}/${searchResults.results.length}`)
      console.log(`   - Fuentes acad√©micas: ${academicCount}/${searchResults.results.length}`)
      console.log(`   - Otras fuentes: ${otherCount}/${searchResults.results.length}`)
      
      // Probar el formateo de contexto
      console.log(`\nüìù PROBANDO FORMATEO DE CONTEXTO:`)
      const context = formatSearchResultsForContext(searchResults)
      console.log(`üìÑ Contexto generado: ${context.length} caracteres`)
      
      // Mostrar las primeras l√≠neas del contexto
      const contextLines = context.split('\n').slice(0, 20)
      console.log(`üìã Primeras l√≠neas del contexto:`)
      contextLines.forEach(line => console.log(`   ${line}`))
      
    } else {
      console.log(`‚ùå Error en b√∫squeda: ${searchResults.error}`)
    }
    
  } catch (error) {
    console.error(`‚ùå Error: ${error.message}`)
  }
  
  console.log('\n' + '='.repeat(80))
  console.log('üèÅ PRUEBA DIRECTA COMPLETADA')
  console.log('='.repeat(80))
}

// Ejecutar la prueba
testWebSearchDirectly().catch(console.error)
