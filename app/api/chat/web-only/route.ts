import { ChatSettings } from "@/types"
import { searchWebEnriched, formatSearchResultsForContext } from "@/lib/tools/web-search"

export async function POST(request: Request) {
  try {
    const json = await request.json()
    const { chatSettings, messages } = json as {
      chatSettings: ChatSettings
      messages: any[]
    }

    // üî• B√öSQUEDA WEB OBLIGATORIA - SIEMPRE SE EJECUTA
    const lastUserMessage = messages.filter(m => m.role === 'user').pop()
    const userQuery = lastUserMessage?.content || ''
    
    console.log(`\n${"üî•".repeat(60)}`)
    console.log(`üîç CHAT SOLO B√öSQUEDA WEB - SIN IA`)
    console.log(`   Query: "${userQuery.substring(0, 50)}..."`)
    console.log(`   Usuario: usuario-anonimo`)
    console.log(`${"üî•".repeat(60)}\n`)
    
    let webSearchContext = ''
    let searchResults: any = null
    
    try {
      console.log(`üì° FORZANDO b√∫squeda en Google CSE...`)
      searchResults = await searchWebEnriched(userQuery)
      
      if (searchResults && searchResults.success && searchResults.results && searchResults.results.length > 0) {
        webSearchContext = formatSearchResultsForContext(searchResults)
        console.log(`\n‚úÖ B√öSQUEDA FORZADA - COMPLETADA CON √âXITO:`)
        console.log(`   üìä Resultados encontrados: ${searchResults.results.length}`)
        console.log(`   üìù Caracteres de contexto: ${webSearchContext.length}`)
        console.log(`\n${"üî•".repeat(60)}\n`)
      } else {
        console.log(`\n‚ö†Ô∏è B√öSQUEDA FORZADA - SIN RESULTADOS`)
        webSearchContext = `B√öSQUEDA EJECUTADA PERO SIN RESULTADOS PARA: "${userQuery}"`
        console.log(`${"üî•".repeat(60)}\n`)
      }
    } catch (error) {
      console.error(`\n‚ùå ERROR EN B√öSQUEDA FORZADA:`, error)
      webSearchContext = `ERROR EN B√öSQUEDA WEB PARA: "${userQuery}" - ${error instanceof Error ? error.message : 'Error desconocido'}`
      console.log(`${"üî•".repeat(60)}\n`)
    }

    // Crear respuesta basada solo en b√∫squeda web
    let responseText = ''
    
    if (webSearchContext.includes('ERROR') || webSearchContext.includes('SIN RESULTADOS')) {
      responseText = `He ejecutado una b√∫squeda web sobre "${userQuery}" pero no encontr√© resultados espec√≠ficos.

Como asistente legal especializado en derecho colombiano, puedo ayudarte con informaci√≥n general sobre temas legales. Para una respuesta m√°s espec√≠fica, te recomiendo consultar directamente con un abogado especializado.

**Nota:** Se ejecut√≥ una b√∫squeda web como parte del proceso obligatorio, pero no se encontraron fuentes espec√≠ficas para tu consulta.`
    } else {
      // Extraer informaci√≥n relevante de los resultados
      const results = searchResults.results.slice(0, 3) // Primeros 3 resultados
      const sources = results.map((result: any, index: number) => 
        `${index + 1}. [${result.title}](${result.url})`
      ).join('\n')

      responseText = `He ejecutado una b√∫squeda web sobre "${userQuery}" y encontr√© informaci√≥n relevante.

Bas√°ndome en la informaci√≥n encontrada, puedo proporcionarte orientaci√≥n general sobre el tema consultado. Sin embargo, para asuntos legales espec√≠ficos, siempre es recomendable consultar con un abogado especializado.

---

## üìö Fuentes Consultadas

${sources}

**Nota:** Esta respuesta se basa en la b√∫squeda web ejecutada como parte del proceso obligatorio.`
    }

    // Usar OpenAIStream para compatibilidad con el frontend
    const { OpenAIStream } = await import('ai')
    
    // Crear un mock response que simule OpenAI
    const mockResponse = {
      choices: [{
        message: {
          content: responseText
        }
      }]
    }

    // Simular streaming usando OpenAIStream
    const stream = OpenAIStream(mockResponse as any)

    return new Response(stream, {
      headers: {
        'Content-Type': 'text/plain; charset=utf-8',
        'Cache-Control': 'no-cache',
        'Connection': 'keep-alive'
      }
    })

  } catch (error: any) {
    console.error('Error en chat solo b√∫squeda web:', error)
    
    return new Response(JSON.stringify({ 
      message: `Error en chat solo b√∫squeda web: ${error.message}`,
      error: error.message,
      timestamp: new Date().toISOString()
    }), {
      status: 500,
      headers: { "Content-Type": "application/json" }
    })
  }
}
