import { NextResponse } from "next/server"
import { searchWebEnriched, formatSearchResultsForContext } from "@/lib/tools/web-search"
import { extractWithFirecrawl } from "@/lib/tools/firecrawl-extractor"
import OpenAI from "openai"
import { ChatCompletionCreateParamsBase } from "openai/resources/chat/completions.mjs"

export const runtime = "nodejs"
export const maxDuration = 60

// Funci√≥n para extraer n√∫mero de art√≠culo y tipo de c√≥digo de la consulta
function extractArticleInfo(query: string): { articleNumber: string | null, codeType: string } {
  // Buscar patrones como "art 11", "art√≠culo 11", "art11", etc.
  const patterns = [
    /art(?:√≠culo)?\s*(\d+)/i,
    /art\.?\s*(\d+)/i,
    /articulo\s*(\d+)/i,
    /art\s*(\d+)/i
  ]
  
  let articleNumber: string | null = null
  for (const pattern of patterns) {
    const match = query.match(pattern)
    if (match) {
      articleNumber = match[1]
      break
    }
  }
  
  // Determinar el tipo de c√≥digo
  let codeType = 'constitucion' // Por defecto
  
  if (query.toLowerCase().includes('codigo general del proceso') || 
      query.toLowerCase().includes('cgp') ||
      query.toLowerCase().includes('proceso')) {
    codeType = 'cgp'
  } else if (query.toLowerCase().includes('codigo civil') || 
             query.toLowerCase().includes('civil')) {
    codeType = 'civil'
  } else if (query.toLowerCase().includes('codigo penal') || 
             query.toLowerCase().includes('penal')) {
    codeType = 'penal'
  } else if (query.toLowerCase().includes('codigo de comercio') || 
             query.toLowerCase().includes('comercio')) {
    codeType = 'comercio'
  } else if (query.toLowerCase().includes('constituci√≥n') || 
             query.toLowerCase().includes('const') ||
             query.toLowerCase().includes('constitucional')) {
    codeType = 'constitucion'
  }
  
  return { articleNumber, codeType }
}

export async function POST(request: Request) {
  try {
    const json = await request.json()
    const { messages } = json as {
      messages: any[]
    }

    const lastUserMessage = messages.filter(m => m.role === 'user').pop()
    const userQuery = lastUserMessage?.content || ''

    console.log(`\n${"üî•".repeat(60)}`)
    console.log(`üîç CHAT SIMPLE DIRECTO - SIN STREAMING`)
    console.log(`   Query: "${userQuery.substring(0, 50)}..."`)
    console.log(`   Usuario: usuario-anonimo`)
    console.log(`${"üî•".repeat(60)}\n`)

    let webSearchContext = ''
    let searchResults: any = null

    // SIEMPRE hacer b√∫squeda web - eliminar base de datos local
    const { articleNumber, codeType } = extractArticleInfo(userQuery)
    
    try {
      console.log(`üì° B√öSQUEDA WEB OBLIGATORIA - SIEMPRE USAR GOOGLE CSE`)
      console.log(`   Query original: "${userQuery}"`)
      console.log(`   Tipo detectado: ${codeType}`)
      
      // Crear query mejorada basada en el tipo de c√≥digo detectado
      let enhancedQuery = userQuery
      
      if (codeType === 'cgp') {
        enhancedQuery = `${userQuery} c√≥digo general del proceso colombia site:gov.co OR site:secretariasenado.gov.co OR site:funcionpublica.gov.co OR site:ramajudicial.gov.co`
      } else if (codeType === 'constitucion') {
        enhancedQuery = `${userQuery} constituci√≥n pol√≠tica colombia 1991 site:gov.co OR site:secretariasenado.gov.co OR site:funcionpublica.gov.co`
      } else if (codeType === 'civil') {
        enhancedQuery = `${userQuery} c√≥digo civil colombia site:gov.co OR site:secretariasenado.gov.co OR site:funcionpublica.gov.co`
      } else if (codeType === 'penal') {
        enhancedQuery = `${userQuery} c√≥digo penal colombia site:gov.co OR site:secretariasenado.gov.co OR site:funcionpublica.gov.co`
      } else {
        // Query general mejorada
        enhancedQuery = `${userQuery} derecho colombiano legislaci√≥n site:gov.co OR site:secretariasenado.gov.co OR site:funcionpublica.gov.co OR site:ramajudicial.gov.co`
      }
      
      console.log(`   Query mejorada: "${enhancedQuery}"`)
      
      searchResults = await searchWebEnriched(enhancedQuery)

      if (searchResults && searchResults.success && searchResults.results && searchResults.results.length > 0) {
        webSearchContext = formatSearchResultsForContext(searchResults)
        console.log(`\n‚úÖ B√öSQUEDA FORZADA - COMPLETADA CON √âXITO:`)
        console.log(`   üìä Resultados encontrados: ${searchResults.results.length}`)
        console.log(`   üìù Caracteres de contexto: ${webSearchContext.length}`)
        
        // Usar Firecrawl para extraer contenido detallado de los mejores resultados
        console.log(`üî• FIRECRAWL: Extrayendo contenido detallado de sitios oficiales...`)
        
        const officialResults = searchResults.results.filter((result: any) => 
          result.url.includes('.gov.co') || 
          result.url.includes('secretariasenado.gov.co') ||
          result.url.includes('funcionpublica.gov.co') ||
          result.url.includes('ramajudicial.gov.co') ||
          result.url.includes('minjusticia.gov.co')
        ).slice(0, 3) // Top 3 sitios oficiales
        
        let detailedContent = ''
        for (const result of officialResults) {
          try {
            console.log(`üî• Firecrawl: Extrayendo ${result.url}`)
            const firecrawlResult = await extractWithFirecrawl(result.url)
            if (firecrawlResult.success && firecrawlResult.content) {
              detailedContent += `\n\n--- CONTENIDO DETALLADO DE ${result.url} ---\n${firecrawlResult.content}\n`
              console.log(`‚úÖ Firecrawl: Extra√≠dos ${firecrawlResult.content.length} caracteres`)
            }
          } catch (error) {
            console.log(`‚ö†Ô∏è Firecrawl fall√≥ para ${result.url}:`, error)
          }
        }
        
        if (detailedContent) {
          webSearchContext += `\n\n--- CONTENIDO DETALLADO EXTRA√çDO CON FIRECRAWL ---\n${detailedContent}`
          console.log(`üî• FIRECRAWL: Total contenido detallado: ${detailedContent.length} caracteres`)
        }
        
        console.log(`\n${"üî•".repeat(60)}\n`)
      } else {
        console.log(`\n‚ö†Ô∏è B√öSQUEDA FORZADA - SIN RESULTADOS`)
        webSearchContext = `B√öSQUEDA EJECUTADA PERO SIN RESULTADOS PARA: "${userQuery}"`
        console.log(`${"üî•".repeat(60)}\n`)
      }
    } catch (error) {
      console.error(`\n‚ùå ERROR EN B√öSQUEDA FORZADA:`, error)
      webSearchContext = `ERROR EN B√öSQUEDA WEB PARA: "${userQuery}" - ${error instanceof Error ? error.message : 'Error desconocido'}`
      console.log(`${"üî•".repeat(60)}\n`)
    }

    // Usar IA para procesar la informaci√≥n encontrada y dar respuesta inteligente
    const openrouterApiKey = process.env.OPENROUTER_API_KEY || ""
    
    if (!openrouterApiKey) {
      return NextResponse.json({
        success: false,
        message: "OpenRouter API Key no configurada",
        timestamp: new Date().toISOString()
      }, { status: 500 })
    }

    const openai = new OpenAI({
      apiKey: openrouterApiKey,
      baseURL: "https://openrouter.ai/api/v1"
    })

    // Preparar fuentes para la respuesta
    const results = searchResults?.results?.filter((result: any) => 
      result.url.includes('.gov.co') || 
      result.url.includes('secretariasenado.gov.co') ||
      result.url.includes('funcionpublica.gov.co') ||
      result.url.includes('alcaldiabogota.gov.co') ||
      result.url.includes('mincit.gov.co') ||
      result.url.includes('ramajudicial.gov.co') ||
      result.url.includes('minjusticia.gov.co')
    ).slice(0, 5) || []

    const sources = results.map((result: any, index: number) => {
      const cleanTitle = result.title
        .replace(/Title:\s*/g, '')
        .replace(/\s*Title:\s*/g, '')
        .trim()
      return `${index + 1}. [${cleanTitle}](${result.url})`
    }).join('\n')

    // Crear prompt mejorado para la IA con contenido detallado de Firecrawl
    const systemPrompt = `Eres un asistente legal especializado en derecho colombiano. Tu tarea es analizar la informaci√≥n encontrada en internet (incluyendo contenido detallado extra√≠do con Firecrawl) y proporcionar una respuesta ESPEC√çFICA y DETALLADA sobre la consulta exacta del usuario.

INFORMACI√ìN ENCONTRADA EN INTERNET:
${webSearchContext.includes('ERROR') || webSearchContext.includes('SIN RESULTADOS') ? 
  'No se encontr√≥ informaci√≥n espec√≠fica en internet para esta consulta.' : 
  webSearchContext}

CONSULTA ESPEC√çFICA DEL USUARIO: "${userQuery}"

INSTRUCCIONES CR√çTICAS:
1. DEBES responder espec√≠ficamente sobre "${userQuery}" - NO respuestas gen√©ricas
2. Si la consulta es sobre un art√≠culo espec√≠fico (ej: "art 90 codigo civil"), DEBES explicar ese art√≠culo espec√≠fico
3. Analiza TODO el contenido encontrado arriba, incluyendo el contenido detallado extra√≠do con Firecrawl
4. NO uses frases gen√©ricas como "puedo ayudarte con informaci√≥n sobre..."
5. Proporciona informaci√≥n CONCRETA y ESPEC√çFICA sobre lo que se pregunta
6. Si encuentras el art√≠culo espec√≠fico, explica su contenido completo, alcance y aplicaci√≥n
7. Usa terminolog√≠a jur√≠dica precisa
8. Si la informaci√≥n no es suficiente para responder espec√≠ficamente, ind√≠calo claramente
9. PRIORIZA el contenido detallado extra√≠do con Firecrawl sobre los snippets de b√∫squeda

EJEMPLO DE RESPUESTA CORRECTA:
Si preguntan "art 90 codigo civil", responde:
"El art√≠culo 90 del C√≥digo Civil establece que [explicaci√≥n espec√≠fica del art√≠culo]. Este art√≠culo regula [alcance espec√≠fico] y se aplica en [casos espec√≠ficos]. Seg√∫n la informaci√≥n oficial encontrada, [detalles adicionales del contenido extra√≠do con Firecrawl]."

EJEMPLO DE RESPUESTA INCORRECTA:
"Como asistente legal especializado en derecho colombiano, puedo ayudarte con informaci√≥n sobre..."

Responde en espa√±ol colombiano con terminolog√≠a jur√≠dica precisa.`

    try {
      const completion = await openai.chat.completions.create({
        model: "openai/gpt-4o-mini",
        messages: [
          { role: "system", content: systemPrompt },
          { role: "user", content: `Analiza la informaci√≥n encontrada (incluyendo contenido detallado de Firecrawl) y responde espec√≠ficamente sobre: ${userQuery}` }
        ],
        temperature: 0.1, // Muy baja para respuestas m√°s precisas
        max_tokens: 2000 // M√°s tokens para respuestas detalladas con Firecrawl
      })

      const aiResponse = completion.choices[0].message.content || "No se pudo generar respuesta"

      // Agregar fuentes al final de la respuesta
      const finalResponse = `${aiResponse}

---

## üìö Fuentes Consultadas

${sources}`

      return NextResponse.json({
        success: true,
        message: finalResponse,
        timestamp: new Date().toISOString(),
        searchExecuted: true,
        resultsFound: searchResults?.results?.length || 0,
        aiProcessed: true
      })

    } catch (aiError: any) {
      console.error("Error en procesamiento de IA:", aiError)
      
      // Fallback mejorado: intentar extraer informaci√≥n espec√≠fica del contexto web
      let fallbackResponse = ""
      
      if (webSearchContext && !webSearchContext.includes('ERROR') && !webSearchContext.includes('SIN RESULTADOS')) {
        // Intentar extraer informaci√≥n espec√≠fica del contexto
        const lines = webSearchContext.split('\n').filter(line => {
          const trimmedLine = line.trim()
          return trimmedLine && 
                 !trimmedLine.includes('Title:') && 
                 !trimmedLine.includes('URL Source:') &&
                 !trimmedLine.includes('Published Time:') &&
                 (trimmedLine.includes('ART√çCULO') || 
                  trimmedLine.includes('art√≠culo') ||
                  trimmedLine.includes('Art√≠culo') ||
                  trimmedLine.includes(userQuery.toLowerCase()))
        })
        
        if (lines.length > 0) {
          const relevantInfo = lines.slice(0, 5).join('\n')
          fallbackResponse = `Bas√°ndome en la informaci√≥n encontrada en fuentes oficiales sobre "${userQuery}":

${relevantInfo}

Esta informaci√≥n se basa en la legislaci√≥n colombiana vigente.`
        } else {
          fallbackResponse = `No se encontr√≥ informaci√≥n espec√≠fica sobre "${userQuery}" en las fuentes consultadas. 

La informaci√≥n disponible no contiene detalles espec√≠ficos sobre la consulta realizada.`
        }
      } else {
        fallbackResponse = `No se pudo encontrar informaci√≥n espec√≠fica sobre "${userQuery}" en las fuentes oficiales consultadas.

La b√∫squeda no arroj√≥ resultados relevantes para responder espec√≠ficamente a tu consulta.`
      }

      const finalFallbackResponse = `${fallbackResponse}

---

## üìö Fuentes Consultadas

${sources}`

      return NextResponse.json({
        success: true,
        message: finalFallbackResponse,
        timestamp: new Date().toISOString(),
        searchExecuted: true,
        resultsFound: searchResults?.results?.length || 0,
        aiProcessed: false,
        error: aiError.message
      })
    }

  } catch (error: any) {
    console.error("Error en chat simple directo:", error)
    return NextResponse.json({
      success: false,
      message: `Error en chat simple directo: ${error.message}`,
      error: error.message,
      timestamp: new Date().toISOString()
    }, { status: 500 })
  }
}
